@model HotelMangementSystem.ViewModel.CustomerViewModel

@{
    ViewBag.Title = "Index";
}
<link href="~/Content/modal.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadCustomerDetails();
        $("#txtCustomerId").val("0");
        $("#btnSave").click(function () {
            if (!$("#formCustomer").valid()) {
                return;
            }
            SaveCustomerData();
        });
    });
    function DeleteCustomer(customerId) {
        var result = confirm("Silmek istedeğine emin misin?");
        if (result === false) {
            return false;
        }
        $.ajax({
            async: true,
            type: 'GET',
            dataType: 'JSON',
            contentType: 'application/json;charset=utf-8',
            data: { customerId: customerId },
            url: '/Customer/DeleteCustomerDetails',
            success: function (data) {
                if (data.success == true) {
                    alert(data.message);
                    LoadCustomerDetails();
                }

            },
            error: function () {
                alert('There is soem problem to process your request.Please try after sometime.');
            }
        });

    }
    function EditCustomer(customerId) {

        $.ajax({
            async: true,
            type: 'GET',
            dataType: 'JSON',
            contentType: 'application/json;charset=utf-8',
            data: { customerId: customerId },
            url: '/Customer/EditCustomerDetails',
            success: function (data) {
                console.log(data);
                $("#txtCustomerFirstName").val(data.CustomerFirstName);
                $("#txtCustomerLastName").val(data.CustomerLastName);
                $("#txtCustomerAddress").val(data.CustomerAddress);
                $("#txtCustomerPhone").val(data.CustomerPhone);
                $("#txtCustomerTC").val(data.CustomerTC);
                $("#txtCustomerGender").val(data.CustomerGender);


                $("#divAddCustomer").modal({ show: true });
                $("#txtCustomerId").val(data.RCustomerId);
                $("#btnSave").text("Update");

            },
            error: function () {
                alert('There is soem problem to process your request.Please try after sometimes.');
            }
        });
    }
    function LoadCustomerDetails() {

        $.ajax({
            async: true,
            data: 'Get',
            dataType: 'HTML',
            contentType: false,
            processData: false,
            url: '/Customer/GetAllCustomerHistory',
            success: function (data) {
                $("#divLoadCustomerDetails").html(data);
            },
            error: function () {
                alert('There is soem problem to process your request.Please try after sometimes.');
            }
        });


    }
    function SaveCustomerData() {
        var formData = new FormData;
        formData.append("Customer", $("#txtCustomerId").val());
        formData.append("CustomerFirstName", $("#txtCustomerFirstName").val());
        formData.append("CustomerLastName", $("#txtCustomerLastName").val());
        formData.append("CustomerAddress", $("#txtCustomerAddress").val());
        formData.append("CustomerPhone", $("#txtCustomerPhone").val());
        formData.append("CustomerTC", $("#txtCustomerTC").val());
        formData.append("CustomerGender", $("#txtCustomerGender").val());

        $.ajax({
            async: true,
            type: 'POST',
            contentType: false,
            processData: false,
            data: formData,
            success: function (data) {
                if (data.success === true) {
                    alert(data.message);
                    ResetCustomerInformation();
                    LoadCustomerDetails()
                }

            },
            error: function () {
                alert('There is soem problem to process your request.');
            }
        })

    }
    function ResetCustomerInformation() {
        $("txtCustomerFirstName").val('');
        $("#txtCustomerLastName").val('');
        $("#txtCustomerAddress").val('');
        $("#txtCustomerPhone").val('');
        $("#txtCustomerTC").val('');
        $("#txtCustomerGender").val('');
        $("#txtCustomerId").val(0);
        $("#btnSave").val("Save");


    }

</script>
<div style="margin-top:20px">
    <button type="button" class="btn btn-secondary btn-lg" data-toggle="modal" data-target="#divAddCustomer" data-backdrop="static " data-keyboard="false" onclick=" ResetCustomerInformation()">Müşteri Ekle</button>

</div>
<div id="divAddCustomer" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class=" modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Müşteri</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>


            </div>
            <div class="modal-body">
                <form id="formCustomer">
                    <div class="container col-md-12">
                        @Html.HiddenFor(expression: model => model.CustomerId, htmlAttributes: new { id = "txtCustomerId" })
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(expression: model => model.CustomerFirstName)
                                @Html.TextBoxFor(model => model.CustomerFirstName, htmlAttributes: new { @class = "form-control", id = "txtCustomerFirstName" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerFirstName, validationMessage: null, htmlAttributes: new { @class = "text-danger" })

                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(expression: model => model.CustomerLastName)
                                @Html.TextBoxFor(expression: model => model.CustomerLastName, htmlAttributes: new { @class = "form-control", id = "txtCustomerLastName" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerLastName, validationMessage: null, htmlAttributes: new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(expression: model => model.CustomerPhone)
                                @Html.TextBoxFor(model => model.CustomerPhone, htmlAttributes: new { @class = "form-control", id = "txtCustomerPhone" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerPhone, validationMessage: null, htmlAttributes: new { @class = "text-danger" })

                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(expression: model => model.CustomerTC)
                                @Html.TextBoxFor(expression: model => model.CustomerTC, htmlAttributes: new { @class = "form-control", id = "txtCustomerTC" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerTC, validationMessage: null, htmlAttributes: new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(expression: model => model.CustomerAddress)
                                @Html.TextBoxFor(model => model.CustomerAddress, htmlAttributes: new { @class = "form-control", id = "txtCustomerAddress" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerAddress, validationMessage: null, htmlAttributes: new { @class = "text-danger" })

                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(expression: model => model.CustomerGender)
                                @Html.TextBoxFor(expression: model => model.CustomerGender, htmlAttributes: new { @class = "form-control", id = "txtCustomerGender" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerGender, validationMessage: null, htmlAttributes: new { @class = "text-danger" })

                            </div>
                        </div>

                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="btnSave" type="button" class="btn btn-success">Kaydet</button> &nbsp;
                <button type="button" data-dismiss="modal" class="btn btn-danger">Kapat</button>

            </div>
        </div>
    </div>
</div>
<div style="margin-top:10px"></div>
<div id="divLoadCustomerDetails"></div>